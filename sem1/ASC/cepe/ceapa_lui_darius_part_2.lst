     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, printf, fprintf, scanf, fscanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import fscanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                  
    20 00000000 66696C652E74787400      file_name db "file.txt", 0
    21 00000009 7200                    read_format db "r", 0
    22 0000000B 256400                  int_format db "%d", 0
    23 0000000E 2564202000              print_int_format db "%d  ",0
    24 00000013 2573000000000000        scanf_format dd "%s", 0
    25                                  
    26 0000001B 7465737400              test_str db "test",0
    27                                  
    28 00000020 5C6E                    backslash_str db "\n"
    29                                  
    30 00000022 FFFFFFFF                file_prt dd -1
    31                                  
    32 00000026 FFFFFFFF                number dd -1
    33                                  
    34 0000002A 00                      print_it db 0
    35                                  
    36 0000002B 00<rept>                fq times 10 db 0
    37 00000035 00000000                aux dd 0
    38 00000039 00000000                best_fq dd 0
    39                                  
    40                                  ; A text file is given. Read the content of the file, determine the digit with the highest frequency and display the digit along with its frequency on the screen. The name of text file is defined in the data segment
    41                                  
    42                                      
    43                                  ; our code starts here
    44                                  segment code use32 class=code
    45                                      start:
    46                                          ; ...
    47                                  
    48 00000000 68[09000000]                    push dword read_format 
    49 00000005 68[00000000]                    push dword file_name 
    50 0000000A FF15[00000000]                  call [fopen]
    51 00000010 83C408                          add esp, 4*2
    52 00000013 A3[22000000]                    mov [file_prt], eax
    53                                          
    54                                          .loop:
    55                                              ;scanf
    56 00000018 68[26000000]                        push number
    57 0000001D 68[0B000000]                        push int_format
    58 00000022 FF35[22000000]                      push dword [file_prt]
    59 00000028 FF15[00000000]                      call [fscanf]
    60 0000002E 83C408                              add esp, 4*2
    61                                              
    62 00000031 833D[26000000]0A                    cmp dword [number], 10 
    63 00000038 83F800                              cmp eax, 0
    64 0000003B 7E25                                jle .exit_loop
    65                                              
    66 0000003D BA00000000                          mov edx,0
    67 00000042 A1[26000000]                        mov eax, [number]
    68 00000047 BF[2B000000]                        mov edi, fq
    69 0000004C BB0A000000                          mov ebx, 10
    70                                              .loop_nr:
    71 00000051 F7F3                                    div dword ebx
    72                                                  ; edx=ebx%10
    73 00000053 FE0417                                  inc byte [edi+edx*1]
    74 00000056 83F800                                  cmp eax, 0
    75 00000059 BA00000000                              mov edx, 0
    76 0000005E 75F1                                    jnz .loop_nr
    77                                             ; push dword [number]
    78                                              ;push dword print_int_format
    79                                              ;call [printf]
    80                                              ;add esp, 4*2
    81 00000060 EBB6                            jmp .loop
    82                                          .exit_loop :
    83                                          
    84 00000062 C705[39000000]-                 mov dword [best_fq], fq
    84 00000068 [2B000000]         
    85 0000006C BE[2B000000]                    mov esi, fq
    86 00000071 B90A000000                      mov ecx, 10
    87                                          .loop_fq:
    88 00000076 8A1E                                mov bl, [esi]
    89 00000078 8B3D[39000000]                      mov edi, [best_fq]
    90 0000007E 381F                                cmp byte [edi], bl 
    91 00000080 7F06                                jnle .end_if
    92 00000082 8935[39000000]                          mov [best_fq],esi 
    93                                              .end_if:
    94 00000088 46                                  inc esi 
    95 00000089 E2EB                            loop .loop_fq
    96                                          
    97                                          
    98 0000008B 8B1D[39000000]                  mov ebx, [best_fq]
    99 00000091 FF33                            push dword [ebx]
   100 00000093 68[0E000000]                    push dword print_int_format ;; printring it's frequency 
   101 00000098 FF15[00000000]                  call [printf]
   102 0000009E 83C408                          add esp, 4*2
   103                                          
   104 000000A1 812D[39000000]-                 sub dword [best_fq], fq 
   104 000000A7 [2B000000]         
   105 000000AB FF35[39000000]                  push dword [best_fq]
   106 000000B1 68[0E000000]                    push dword print_int_format
   107 000000B6 FF15[00000000]                  call [printf]
   108 000000BC 83C408                          add esp, 4*2 ;; printing the most common digit 
   109                                          
   110                                          ; exit(0)
   111 000000BF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   112 000000C1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
