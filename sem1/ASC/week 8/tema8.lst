     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15 00000000 6E656C75                a db "nelu"
    16                                  lenA equ $-a
    17 00000004 4E654C556973484552-     b db "NeLUisHEREEE"
    17 0000000D 454545             
    18                                  lenB equ $-b
    19                                  
    20 00000010 01<rept>                c times(lenB) db 1
    21                                  
    22                                  
    23                                  
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                      
    30                                          ; Two strings of bytes A and B are given. Parse the shortest string(A) of those two and build a third string C as follows:
    31                                  
    32                                          ; up to the lenght of the shortest string(A), C contains the largest element of the same rank from the two strings
    33                                          
    34                                          ; then, up to the length of the longest string(B), C will be filled with 1 and 0, alternatively.
    35                                      
    36                                          
    37                                        
    38 00000000 B800000000                      mov EAX, 0
    39                                          
    40                                            
    41                                          ;; make c equal to b till lenA
    42 00000005 B904000000                      mov ecx, dword lenA
    43 0000000A BE[04000000]                    mov ESI, b
    44 0000000F BF[10000000]                    mov EDI, c
    45 00000014 E303                            jecxz skip_loop1
    46                                              _loop:
    47 00000016 A4                                      movsb
    48 00000017 E2FD                                loop _loop
    49                                          skip_loop1:
    50                                          
    51                                          ; up to the lenght A, C contains the largest element of the same rank from the two strings
    52 00000019 B904000000                      mov ECX, dword lenA
    53 0000001E BF[10000000]                    mov EDI, c
    54 00000023 BE[00000000]                    mov ESI, a
    55 00000028 E30F                            jecxz skip_loop2
    56                                              _loop2:
    57 0000002A A6                                      cmpsb
    58 0000002B 4E                                      dec ESI ; a
    59 0000002C 4F                                      dec EDI ; c
    60 0000002D 7C04                                    jl less
    61                                                      ;greater
    62 0000002F 8A06                                        mov AL, [ESI]
    63 00000031 EB02                                    jmp not_less
    64                                                  less:
    65 00000033 8A07                                        mov AL, [EDI]
    66                                                  not_less:
    67                                                  
    68 00000035 AA                                      stosb ; edi
    69 00000036 46                                      inc esi
    70 00000037 E2F1                                loop _loop2
    71                                          skip_loop2:
    72                                          
    73                                                  
    74                                          ; then, up to the length of the longest string(B), C will be filled with 1 and 0, alternatively.
    75 00000039 B90C000000                      mov ECX, lenB
    76 0000003E 83E904                          sub ECX, lenA 
    77                                         ; mov EDI, c
    78 00000041 E3F6                            jecxz skip_loop2
    79                                              _loop3:
    80                                                  
    81 00000043 89C8                                    mov EAX, ECX 
    82 00000045 83E001                                  and EAX, 1
    83 00000048 83F801                                  cmp EAX, 1
    84 0000004B 7404                                    je _equal
    85                                                      ;not equal 
    86                                                      ;mov [EDI], 1
    87 0000004D B031                                        mov AL, '1'
    88 0000004F EB02                                    jmp not_equal
    89                                                  _equal : ;
    90                                                     ; mov [EDI], 0
    91 00000051 B030                                       mov AL, '0'
    92                                                  not_equal:
    93                                                  
    94 00000053 AA                                      stosb
    95 00000054 E2ED                                loop _loop3
    96                                          skip_loop3:
    97                                      
    98                                          ; exit(0)
    99 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   100 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
   101                                  
   102                                          
   103                                          
   104                                          
   105                                          
   106                                          
   107                                          
   108                                          
   109                                          
