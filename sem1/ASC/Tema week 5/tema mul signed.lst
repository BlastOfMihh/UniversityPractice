     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 0200                        a dw 2
    16 00000002 01                          b db 1
    17 00000003 0200                        c dw 2
    18 00000005 04000000                    d dd 4
    19 00000009 0800000000000000            x dq 8
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          
    26                                          ;; (a*a+b/c-1)/(b+c)+d-x; 
    27                                          ; a-word
    28                                          ; b-byte
    29                                          ; c-word
    30                                          ; d-doubleword
    31                                          ; x-qword
    32                                          
    33 00000000 B800000000                      mov EAX, 0
    34 00000005 66A1[00000000]                  mov AX, [a]
    35 0000000B 6699                            cwd
    36 0000000D F7E0                            mul EAX
    37 0000000F 89C3                            mov EBX, EAX ; EBX = the result
    38                                          ;; EBX=a * a
    39 00000011 B800000000                      mov EAX, 0
    40 00000016 A0[02000000]                    mov AL, [b]
    41 0000001B 6698                            cbw
    42 0000001D 6699                            cwd 
    43 0000001F 668B0D[03000000]                mov CX, [c]
    44 00000026 6699                            cwd 
    45 00000028 F7F1                            div ECX
    46 0000002A 01C3                            add EBX, EAX  
    47 0000002C 83EB01                          sub EBX, 1
    48                                          ;; first param 
    49 0000002F B800000000                      mov EAX, 0
    50 00000034 A0[02000000]                    mov AL, [b]
    51 00000039 6698                            cbw 
    52 0000003B 6699                            cwd
    53                                          ;;add AX, [c]
    54 0000003D 89C2                            mov EDX, EAX
    55 0000003F 66A1[03000000]                  mov AX, [c]
    56 00000045 6699                            cwd 
    57 00000047 29C2                            sub EDX, EAX 
    58 00000049 89D8                            mov EAX, EBX ; result in EAX 
    59 0000004B F7F2                            div EDX 
    60 0000004D 99                              cdq
    61 0000004E 0305[05000000]                  add EAX, [d]
    62 00000054 83D200                          adc EDX, 0
    63                                          
    64 00000057 2B05[0D000000]                  sub EAX, [x+4]
    65 0000005D 1B15[09000000]                  sbb EDX, [x]
    66                                          
    67                                          ; exit(0)
    68 00000063 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 00000065 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    70                                  
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          
    77                                          
    78                                          
    79                                          
    80                                          
    81                                          
    82                                          
    83                                          
    84                                          
